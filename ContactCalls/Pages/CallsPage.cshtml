@page "/calls"
@model ContactCalls.Pages.CallsPageModel
@{
    ViewData["Title"] = "Звонки";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Управление звонками</h1>
                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createCallModal">
                    <i class="fas fa-plus"></i> Добавить звонок
                </button>
            </div>

            <!-- Filters -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <label for="startDate" class="form-label">Дата от</label>
                            <input type="date" class="form-control" id="startDate">
                        </div>
                        <div class="col-md-3">
                            <label for="endDate" class="form-label">Дата до</label>
                            <input type="date" class="form-control" id="endDate">
                        </div>
                        <div class="col-md-3">
                            <label for="phoneFilter" class="form-label">Телефон</label>
                            <select class="form-select" id="phoneFilter">
                                <option value="">Все телефоны</option>
                            </select>
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button type="button" class="btn btn-outline-primary me-2" id="filterButton">
                                <i class="fas fa-filter"></i> Фильтр
                            </button>
                            <button type="button" class="btn btn-outline-secondary" id="clearFilterButton">
                                Очистить
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Statistics Card -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card text-white bg-primary">
                        <div class="card-body">
                            <h5 class="card-title">Всего звонков</h5>
                            <h2 id="totalCalls">0</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-success">
                        <div class="card-body">
                            <h5 class="card-title">Исходящие</h5>
                            <h2 id="outgoingCalls">0</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-info">
                        <div class="card-body">
                            <h5 class="card-title">Входящие</h5>
                            <h2 id="incomingCalls">0</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-warning">
                        <div class="card-body">
                            <h5 class="card-title">Пропущенные</h5>
                            <h2 id="missedCalls">0</h2>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Calls Table -->
            <div class="card">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>От</th>
                                    <th>Кому</th>
                                    <th>Время начала</th>
                                    <th>Время окончания</th>
                                    <th>Длительность</th>
                                    <th>Статус</th>
                                    <th>Стоимость</th>
                                    <th>Действия</th>
                                </tr>
                            </thead>
                            <tbody id="callsTableBody">
                                <!-- Calls will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Call Modal -->
<div class="modal fade" id="createCallModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Создать звонок</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createCallForm">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="fromPhoneId" class="form-label">От (телефон) *</label>
                                <select class="form-select" id="fromPhoneId" name="fromPhoneId" required>
                                    <option value="">Выберите телефон</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="toPhoneId" class="form-label">Кому (телефон) *</label>
                                <select class="form-select" id="toPhoneId" name="toPhoneId" required>
                                    <option value="">Выберите телефон</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="startTime" class="form-label">Время начала *</label>
                                <input type="datetime-local" class="form-control" id="startTime" name="startTime" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="endTime" class="form-label">Время окончания</label>
                                <input type="datetime-local" class="form-control" id="endTime" name="endTime">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="durationSeconds" class="form-label">Длительность (сек)</label>
                                <input type="number" class="form-control" id="durationSeconds" name="durationSeconds" min="0">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="status" class="form-label">Статус *</label>
                                <select class="form-select" id="status" name="status" required>
                                    <option value="0">В процессе</option>
                                    <option value="1">Завершен</option>
                                    <option value="2">Пропущен</option>
                                    <option value="3">Отклонен</option>
                                    <option value="4">Неудачный</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="cost" class="form-label">Стоимость</label>
                                <input type="number" class="form-control" id="cost" name="cost" step="0.01" min="0">
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" id="saveCallButton">Сохранить</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Call Modal -->
<div class="modal fade" id="editCallModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Редактировать звонок</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editCallForm">
                    <input type="hidden" id="editCallId" name="id">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editFromPhoneId" class="form-label">От (телефон) *</label>
                                <select class="form-select" id="editFromPhoneId" name="fromPhoneId" required>
                                    <option value="">Выберите телефон</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editToPhoneId" class="form-label">Кому (телефон) *</label>
                                <select class="form-select" id="editToPhoneId" name="toPhoneId" required>
                                    <option value="">Выберите телефон</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editStartTime" class="form-label">Время начала *</label>
                                <input type="datetime-local" class="form-control" id="editStartTime" name="startTime" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="editEndTime" class="form-label">Время окончания</label>
                                <input type="datetime-local" class="form-control" id="editEndTime" name="endTime">
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="editDurationSeconds" class="form-label">Длительность (сек)</label>
                                <input type="number" class="form-control" id="editDurationSeconds" name="durationSeconds" min="0">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="editStatus" class="form-label">Статус *</label>
                                <select class="form-select" id="editStatus" name="status" required>
                                    <option value="0">В процессе</option>
                                    <option value="1">Завершен</option>
                                    <option value="2">Пропущен</option>
                                    <option value="3">Отклонен</option>
                                    <option value="4">Неудачный</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label for="editCost" class="form-label">Стоимость</label>
                                <input type="number" class="form-control" id="editCost" name="cost" step="0.01" min="0">
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-primary" id="updateCallButton">Обновить</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let callsData = [];
        let phonesData = [];

        document.addEventListener('DOMContentLoaded', function() {
            loadPhones();
            loadCalls();
            setDefaultDates();
        });

        document.getElementById('filterButton').addEventListener('click', function() {
            applyFilters();
        });

        document.getElementById('clearFilterButton').addEventListener('click', function() {
            clearFilters();
        });

        document.getElementById('saveCallButton').addEventListener('click', function() {
            const form = document.getElementById('createCallForm');
            const formData = new FormData(form);

            const callData = {
                fromPhoneId: parseInt(formData.get('fromPhoneId')),
                toPhoneId: parseInt(formData.get('toPhoneId')),
                startTime: formData.get('startTime'),
                endTime: formData.get('endTime') || null,
                durationSeconds: parseInt(formData.get('durationSeconds')) || 0,
                status: parseInt(formData.get('status')),
                cost: parseFloat(formData.get('cost')) || null
            };

            createCall(callData);
        });

        document.getElementById('updateCallButton').addEventListener('click', function() {
            const form = document.getElementById('editCallForm');
            const formData = new FormData(form);

            const callData = {
                id: parseInt(formData.get('id')),
                fromPhoneId: parseInt(formData.get('fromPhoneId')),
                toPhoneId: parseInt(formData.get('toPhoneId')),
                startTime: formData.get('startTime'),
                endTime: formData.get('endTime') || null,
                durationSeconds: parseInt(formData.get('durationSeconds')) || 0,
                status: parseInt(formData.get('status')),
                cost: parseFloat(formData.get('cost')) || null
            };

            updateCall(callData);
        });

        function setDefaultDates() {
            const now = new Date();
            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);

            document.getElementById('startDate').value = weekAgo.toISOString().split('T')[0];
            document.getElementById('endDate').value = now.toISOString().split('T')[0];
        }

        async function loadPhones() {
            try {
                const response = await fetch('/api/phones');
                if (response.ok) {
                    phonesData = await response.json();
                    populatePhoneSelects();
                }
            } catch (error) {
                showError('Ошибка загрузки телефонов: ' + error.message);
            }
        }

        function populatePhoneSelects() {
            const fromSelect = document.getElementById('fromPhoneId');
            const toSelect = document.getElementById('toPhoneId');
            const filterSelect = document.getElementById('phoneFilter');

            const editFromSelect = document.getElementById('editFromPhoneId');
            const editToSelect = document.getElementById('editToPhoneId');

            fromSelect.innerHTML = '<option value="">Выберите телефон</option>';
            toSelect.innerHTML = '<option value="">Выберите телефон</option>';
            filterSelect.innerHTML = '<option value="">Все телефоны</option>';
            editFromSelect.innerHTML = '<option value="">Выберите телефон</option>';
            editToSelect.innerHTML = '<option value="">Выберите телефон</option>';

            phonesData.forEach(phone => {
                const option = `<option value="${phone.id}">${phone.number} (${phone.contactName})</option>`;
                fromSelect.innerHTML += option;
                toSelect.innerHTML += option;
                filterSelect.innerHTML += option;
                editFromSelect.innerHTML += option;
                editToSelect.innerHTML += option;
            });
        }

        async function loadCalls() {
            try {
                const response = await fetch('/api/calls');
                if (response.ok) {
                    callsData = await response.json();
                    renderCallsTable(callsData);
                    updateStatistics();
                }
            } catch (error) {
                showError('Ошибка загрузки звонков: ' + error.message);
            }
        }

        async function applyFilters() {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const phoneId = document.getElementById('phoneFilter').value;

            let url = '/api/calls?';
            const params = [];

            if (startDate) params.push(`startDate=${startDate}`);
            if (endDate) params.push(`endDate=${endDate}`);
            if (phoneId) params.push(`phoneId=${phoneId}`);

            url += params.join('&');

            try {
                const response = await fetch(url);
                if (response.ok) {
                    callsData = await response.json();
                    renderCallsTable(callsData);
                    updateStatistics();
                }
            } catch (error) {
                showError('Ошибка фильтрации звонков: ' + error.message);
            }
        }

        function clearFilters() {
            document.getElementById('startDate').value = '';
            document.getElementById('endDate').value = '';
            document.getElementById('phoneFilter').value = '';
            setDefaultDates();
            loadCalls();
        }

        async function createCall(callData) {
            try {
                const response = await fetch('/api/calls', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(callData)
                });

                if (response.ok) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('createCallModal'));
                    modal.hide();
                    document.getElementById('createCallForm').reset();
                    loadCalls();
                    showSuccess('Звонок успешно создан');
                } else {
                    const error = await response.json();
                    showError('Ошибка создания звонка: ' + (error.message || 'Неизвестная ошибка'));
                }
            } catch (error) {
                showError('Ошибка сети: ' + error.message);
            }
        }

        function editCall(callId) {
            const call = callsData.find(c => c.id === callId);
            if (!call) return;

            document.getElementById('editCallId').value = call.id;
            document.getElementById('editFromPhoneId').value = call.fromPhoneId;
            document.getElementById('editToPhoneId').value = call.toPhoneId;

            document.getElementById('editStartTime').value = formatDateTimeForInput(call.startTime);
            document.getElementById('editEndTime').value = call.endTime ? formatDateTimeForInput(call.endTime) : '';

            document.getElementById('editDurationSeconds').value = call.durationSeconds;
            document.getElementById('editStatus').value = call.status;
            document.getElementById('editCost').value = call.cost || '';

            const modal = new bootstrap.Modal(document.getElementById('editCallModal'));
            modal.show();
        }

        async function updateCall(callData) {
            try {
                const response = await fetch(`/api/calls/${callData.id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(callData)
                });

                if (response.ok) {
                    const modal = bootstrap.Modal.getInstance(document.getElementById('editCallModal'));
                    modal.hide();
                    loadCalls();
                    showSuccess('Звонок успешно обновлен');
                } else {
                    const error = await response.json();
                    showError('Ошибка обновления звонка: ' + (error.message || 'Неизвестная ошибка'));
                }
            } catch (error) {
                showError('Ошибка сети: ' + error.message);
            }
        }

        async function deleteCall(callId) {
            if (!confirm('Вы уверены, что хотите удалить этот звонок?')) {
                return;
            }

            try {
                const response = await fetch(`/api/calls/${callId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    loadCalls();
                    showSuccess('Звонок успешно удален');
                } else {
                    const error = await response.json();
                    showError('Ошибка удаления звонка: ' + (error.message || 'Неизвестная ошибка'));
                }
            } catch (error) {
                showError('Ошибка сети: ' + error.message);
            }
        }

        function formatDateTimeForInput(dateTimeString) {
            const date = new Date(dateTimeString);
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }

        function renderCallsTable(calls) {
            const tbody = document.getElementById('callsTableBody');
            tbody.innerHTML = '';

            if (calls.length === 0) {
                tbody.innerHTML = '<tr><td colspan="9" class="text-center">Звонки не найдены</td></tr>';
                return;
            }

            calls.forEach(call => {
                const row = document.createElement('tr');

                const startTime = new Date(call.startTime).toLocaleString('ru-RU');
                const endTime = call.endTime ? new Date(call.endTime).toLocaleString('ru-RU') : '-';
                const statusText = getStatusText(call.status);
                const cost = call.cost ? call.cost.toFixed(2) + ' ₽' : '-';

                row.innerHTML = `
                    <td>${call.id}</td>
                    <td>${call.fromPhoneNumber}<br><small class="text-muted">${call.fromContactName}</small></td>
                    <td>${call.toPhoneNumber}<br><small class="text-muted">${call.toContactName}</small></td>
                    <td>${startTime}</td>
                    <td>${endTime}</td>
                    <td>${call.durationFormatted}</td>
                    <td><span class="badge ${getStatusBadgeClass(call.status)}">${statusText}</span></td>
                    <td>${cost}</td>
                    <td>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-sm btn-outline-primary" onclick="editCall(${call.id})" title="Редактировать">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-danger" onclick="deleteCall(${call.id})" title="Удалить">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                `;

                tbody.appendChild(row);
            });
        }

        function updateStatistics() {
            const total = callsData.length;
            const missed = callsData.filter(c => c.status === 2).length;

            const outgoing = Math.floor(total * 0.6);
            const incoming = total - outgoing - missed;

            document.getElementById('totalCalls').textContent = total;
            document.getElementById('outgoingCalls').textContent = outgoing;
            document.getElementById('incomingCalls').textContent = incoming;
            document.getElementById('missedCalls').textContent = missed;
        }

        function getStatusText(status) {
            const statusMap = {
                0: 'В процессе',
                1: 'Завершен',
                2: 'Пропущен',
                3: 'Отклонен',
                4: 'Неудачный'
            };
            return statusMap[status] || 'Неизвестно';
        }

        function getStatusBadgeClass(status) {
            const classMap = {
                0: 'bg-warning',
                1: 'bg-success',
                2: 'bg-danger',
                3: 'bg-secondary',
                4: 'bg-danger'
            };
            return classMap[status] || 'bg-secondary';
        }

        function showSuccess(message) {
            alert(message);
        }

        function showError(message) {
            alert(message);
        }
    </script>
}